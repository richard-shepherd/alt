ALT - Another Log Tailer
------------------------
- A log tailer designed to be run in a client-server way

- The server can be hosted on a remote machine and communicate
  with the client via a network transport

- The server should also be able to be run locally, ie in the same process
  if we want to create a standalone tail app

- The UI should be separate from the client library
  - So that the client-server code can be used with differnt UIs
  - We should provide a default / sample UI

- Features
  - The client should cache a configured amount of data
  - Configurable text highlighting in the UI, eg for ERROR, WARN etc
  - Text search which is performed server side
  - Find lines by timestamp
  - Updates from the server can be compressed when being sent via the transport
  - Works with very large files
  - Ability to copy / download a file locally


Components
----------
  UI - Client - (Transport) - Server


Transport and interfaces
------------------------
- The server exposes an ILogTailServer interface
  - The client plugs in to an ILogTailServer
  - This could be the Server directly
  - Or it could be to the Transport which exposes the ILogTailServer interface to the client
    - And then the other end of the trasnport connects to the real Server by its ILogTailServer interface

- The client exposes an ILogTailClient interface (to the UI)
  - Or does it???
  - Aren't all the interfaces the same?

- Do we need anything different on the client interface compared with the server interface?
  - The client will do caching of (possible remote) data
  - But that does not need to be part of the interface

- Let's say that there is just one interface: ILogTailer

- ILogTailer
  - constructor(path, tail-callback)
  - constructor(remote-machine-name, path, tail-callback)
  - getText(start-position, end-position)  // used (for example) by the UI when you scroll
  
- tail-callback provides:
  - file-size
  - text-block: 
    - start position of text
    - text itself


Names
-----
- Should the names have the word 'Log' in them?

- I guess it could be used to read files which are not logs

- On the other hand, some of the features such as timestamp detection are more
  directly related to log files

- So, let's keep the word 'Log'


Finding lines by timestamp
--------------------------
- Timestamps could be in various format

- They may (or may not) include a date as well as a time

- They are likely to be close to the start of each line
  - But not necessarily right at the start

- The client should provide info about:
  - The datetime format
  - The likely position in the line - even if just 0 < position < 50

- The server could scan the file and keep an index of timestamps vs positions
  - For a configured number of items, eg 100

- To find a timestamp we could use the index to find the bounds of the
  timestamp and then use the main search feature to find the exact position
  - To do this, search should have optional start-position and end-position
    - At least at the server side


Finding lines which match a search
----------------------------------
- Search can be standard or regex

- What do we do if the search finds too many lines?
  - eg, all the lines in a huge file?
  - We cannot return them all
  - It may not be good enough to return the first matches

- I think we need some sort of enumerable /iterable object for search results
  - This could return results across a number of requests to the server

- So the search is an object with a lifetime
  - You dispose it when you are finished with the search

- Could the search be some sort of virtual file?
  - Maybe returned with ILogTailer?
  - Then it itself could be searchable

- Or we could allow multiple searches


File position vs lines
----------------------
- UIs will want to show lines

- For large files it is hard to know the number of lines
  - Or at least, maybe not hard but slow

- Though maybe it could work to find the exact number of lines?
  - We could do the slow scan first
  - Then update this by reading just the tail as it changes
  - So the server could know the exact number of lines

- Like with timestamps, the server could keep an index of line-number vs file-position
  - For a configured number of index entries

- Can everything be done with fileposition instead of lines?
  - Even in the UI

- I think BareTail must do this
  - As it opens files instantly, even very long ones
  - And it cannot have time to find the number of lines

- In BareTail, the scroll bar grabber is a fixed size
  - It does not change for different size files
  - So I am fairly sure that it is not related to either size of the file
    or to the number of lines

- So I think that the BareTail scrollbar is selecting a file position
  - Not a line number

- Even so, BareTail does show log lines!
  - And as you manually scroll up, it shows you the next line
  - So it must have some sort of interesting relationship between the lines and the 
    scrollbar (file) position

- Maybe it works like this:
  - If you scroll using the scrollbar, it selects a file position
  - If you scroll manually with the arrow keys it finds the position
    for the selected line and then sets the scroll bar from that

- It must have some buffer of lines that is larger than what you see on the screen
  - And as you scroll (one way or the other) it makes sure that it has a buffer around
    what you are seeing


How would the UI work with file positions?
------------------------------------------






































